ROSTemplateFormatVersion: '2015-09-01'

Resources:
  RAMRole:
    Type: ALIYUN::RAM::Role
    Properties:
      RoleName:
        Fn::Replace:
          - <random-suffix>:
              Ref: ALIYUN::StackName
          - Destination-<random-suffix>
      Description: 'RAM role for sub flow demo'
      AssumeRolePolicyDocument:
        Version: 1
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - fc.aliyuncs.com
      Policies:
        - PolicyName:
            Fn::Replace:
              - <random-suffix>:
                  Ref: ALIYUN::StackName
              - Destination-<random-suffix>
          PolicyDocument:
            Version: 1
            Statement:
              - Effect: Allow
                Action:
                  - fc:InvokeFunction
                  - mns:PublishMessage
                  - mns:SendMessage
                Resource:
                  - '*'

  # Create FC service
  Service:
    DependsOn:
      - RAMRole
    Type: ALIYUN::FC::Service
    Properties:
      ServiceName:
        Fn::Replace:
          - <random-suffix>:
              Ref: ALIYUN::StackName
          - Destination-<random-suffix>
      Role:
        Fn::Replace:
          - <main-account-id>:
              Ref: ALIYUN::TenantId
            <random-suffix>:
              Ref: ALIYUN::StackName
          - acs:ram::<main-account-id>:role/Destination-<random-suffix>
      InternetAccess: true


  # Create function run and callback
  Function:
    Type: ALIYUN::FC::Function
    DependsOn:
      - Service
    Properties:
      ServiceName:
        Fn::Replace:
          - <random-suffix>:
              Ref: ALIYUN::StackName
          - Destination-<random-suffix>
      Code:
        SourceCode:
          Fn::Replace:
            - <region>:
                Ref: ALIYUN::Region
            - |-
              # -*- coding: utf-8 -*-
              import logging
              import json

              def handler(event, context):
                  class MyError(Exception):
                      pass
                  evt = json.loads(event)
                  if "failure" in evt :
                      # Raise a custom exception.
                      raise MyError('My unhandled exception')
                  return event
      FunctionName: main
      Handler: index.handler
      Runtime: python3
      MemorySize: 128
      Timeout: 120
      AsyncConfiguration:
        Destination:
          OnSuccess: acs:mns:::/queues/{please_replace_me}/messages
          OnFailure: acs:mns:::/queues/{please_replace_me}/messages
        MaxAsyncEventAgeInSeconds: 20
        MaxAsyncRetryAttempts: 1

